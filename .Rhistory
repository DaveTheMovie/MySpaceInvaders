yhat<- predict(fit_logreg,X_iss_std)
phat<- 1 / (1+exp(-(yhat)))
chat<- round(phat)
MyConfusion01(y_iss,chat)
yhat<- predict(fit_logreg,X_oss_std)
phat<- 1 / (1+exp(-(yhat)))
chat<- round(phat)
MyConfusion01(y_oss,chat)
MyClassificationPlot(y_oss,phat)
# install.packages("party")
library(party)
fit_ctree<- party::ctree(formula = Direction ~ .,D_iss_std)
print(fit_ctree)
plot(fit_ctree)
summary(fit_ctree)
phat = predict(fit_ctree,X_oss_std)
MyClassificationPlot(y_oss,phat)
chat<- round(phat)
MyConfusion01(y_oss,chat)
# install.packages("randomForest")
library(randomForest)
y_iss_factor = as.factor(y_iss)
y_oss_factor = as.factor(y_oss)
fit_randForest<- randomForest(x = X_iss_std, y = y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=500,
keep.forest = F,
importance = F)
object.size(fit_randForest)
print(fit_randForest)
importance(fit_randForest)
fit_randForest<- randomForest(x = X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=500,
keep.forest = T,
importance = T)
fit_randForest<- randomForest(x = X_iss_std, y = y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=500,
keep.forest = F,
importance = F)
fit_randForest<- randomForest(x = X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=500,
keep.forest = T,
importance = T)
object.size(fit_randForest)
print(fit_randForest)
importance
importance(fit_randForest)
chat = predict(fit_randForest,newdata = X_oss_std)
MyConfusion01(y_oss,chat)
plot(fit_randForest$err.rate[,1],type="l",ylim=c(0.05,0.3),ylab="Error")
9/(80 + 47 +9 +116)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
max_mtry = 10
ntree = 100
errorvec = vector(mode = 'numeric',length = max_mtry)
for (i in 1:max_mtry){
fit_randForest<- randomForest(X_iss_std, y=y_iss_factor,
xtest=X_oss_std, ytest=y_oss_factor,
ntree=ntree,
keep.forest = F,
importance = F,
mtry = i)
errorvec[i] = mean(fit_randForest$err.rate[(ntree-20):ntree,1])
}
plot(errorvec)
# Plot Function ####
vplot = function(vec,
new = T,
b = 0,
xlim = c(-abs(vec[1]),+abs(vec[1])),
ylim = c(-(abs(vec[2]+b)),+abs(vec[2])+b),
col = 'black',
origin = c(0,b)){
if (new == T) plot(0,0,xlim=xlim,ylim=ylim,col='white',xlab = '',ylab='')
arrows(x0 = origin[1],
y0 = origin[2],
x1 = vec[1],
y1 = vec[2]+b,
col=col,
length = 0.05)
}
# Vector Function ####
Vec = function(x,y){matrix(c(x,y),2,1)}
# Simple Plot ####
x = Vec(1,0)
vplot(x)
# Location Plot ####
v = Vec(1,0)
vplot(v)
vplot(v,b =  1,new = F)
vplot(v,b = -1,new = F)
# Rotation Function ####
R = function(t){
matrix(c(cos(t),sin(t),-sin(t),cos(t)),2,2)
}
# Manual Matrix Plot ####
x = Vec(1,0)
A = diag(2)
A
vplot(A %*% x)
vplot(-A %*% x, new = F)
# Rotation Function Plot ####
vplot(R(0.00) %*% x)
vplot(R(0.50*pi) %*% x,new = F)
vplot(R(1.00*pi) %*% x,new = F)
vplot(R(1.50*pi) %*% x,new = F)
# Rotation Loop Plot ####
n = 4
vplot(R(0)%*%x)
for (i in 1:n){
vplot(R(i/n * 2*pi) %*% x,new = F)
}
# Spiral ####
n = 100
vplot(R(0)%*%x)
for (i in 1:n){
s = i/n
vplot(s * R(i/n * 2*pi) %*% x,new = F)
}
# Color Spiral ####
n = 500
vplot(R(0)%*%x)
for (i in 1:n){
s = i/n
vplot(s * R(i/n * 2*pi) %*% x,new = F,col = 2*8*i/n)
}
# Moving Color Spiral ####
n = 500
vplot(R(0)%*%x, b=1)
for (i in 1:n){
s = i/n
vplot(vec = s * R(i/n * 2*pi) %*% x,
b = i/n,
new = F,
col = 2*8*i/n)
}
# Inner Product Function ####
iprod = function(v1,v2){
sum(v1*v2)
}
# Norm Function ####
Norm = function(v){
v / sqrt(iprod(v,v))
}
# Projection Plot ####
u = Vec(-1,4)
v = Vec(2,7)
s = iprod(u,v)/iprod(v,v)
projx = s*v
vplot(u,xlim = c(-12,12),ylim = c(-12,12),col = 'green')
vplot(v,F,col = 'red')
vplot(projx,F,col = 'blue')
vplot(projx,F,col = 'orange',origin = u)
# SVM Visualization
x1 = Vec(3,11)
x2 = Vec(8,7)
w = Vec(10,13)
vplot(w,col = 'blue')
vplot(x1,col = 'red',new = F)
vplot(x2,col = 'green',new = F)
reticulate::repl_python()
goToMyPage_dplyr = function(){
browseURL(url="https://ty2448.shinyapps.io/qShiny_dplyr/")
}
goToMyPage_dplyr()
library(ggplot2)
mpg
write.csv(x = mpg, 'mpg.csv')
library(shiny); runApp('c4rm_hw9/yangtongyu_480986_13961578_ty2448_Homework 9.R')
runApp('c4rm_hw9/yangtongyu_480986_13961578_ty2448_Homework 9.R')
f_obj = function(x,y){
return(x^2 + y^2)
}
outer(0:100,0:100)
omat = outer(0:10,0:10)
View(omat)
f_obj = function(x,y){
return(x^2 + y^2)
}
for (i in 1:10){
for (j in 1:10){
zmat[i,j] = f_obj(i,j)
}
}
zmat = matrix(0,n,n)
n = 10
zmat = matrix(data = 0,nrow = n,ncol = n)
for (i in 1:10){
for (j in 1:10){
zmat[i,j] = f_obj(i,j)
}
}
persp(zmat)
persp(x = 1:n,y=1:n,zmat)
persp(x = c(1,2,3,4,5,6,7,8,9,10),y=1:n,zmat)
persp(zmat)
outer(1:n,1:n)
outer(1:n,1:n,f_obj)
persp(zmat)
zmat = outer(1:n,1:n,f_obj)
persp(zmat)
f_obj = function(x,y){
return(x + y)
}
n = 10
zmat = matrix(data = 0,nrow = n,ncol = n)
for (i in 1:10){
for (j in 1:10){
zmat[i,j] = f_obj(i,j)
}
}
persp(zmat)
zmat = outer(1:n,1:n,f_obj)
persp(zmat)
persp(zmat,add = T)
# Base Case ####
set.seed(0)
n = 200
x1 = c(rnorm(n/2, 0, 4), rnorm(n/2, 1, 3))
x2 = c(rnorm(n/2, 0, 1), rnorm(n/2, 6, 1))
y = as.factor(c(rep(-1, n/2), rep(1, n/2)))
df1 = data.frame(x1, x2, y)
targetname = 'y'
plot(x = df1$x1,y = df1$x2, col = df1$y)
idx_iis = sample(1:200, 200*.8)
idx_oss = setdiff(1:n,idx_iis)
library(e1071)
fit_svm = svm(y ~ ., data = df1,
subset = idx_iis,
kernel = "linear",
cost = 1e6)
plot(fit_svm, data = df1[idx_iis, ])
summary(fit_svm)
fit_svm$index
ypred = predict(fit_svm, df1[idx_oss,])
table('predicted' = ypred,'actual'=df1[idx_oss, targetname])
df2 = rbind(df1, c(10, 2, 1))
plot(x = df2$x1, y = df2$x2, col = df2$y)
fit_svm2 = svm(y ~ ., data = df2,
kernel = "linear",
cost = 1e6)
plot(fit_svm, df1[idx_iis, ])
plot(fit_svm2, df2)
summary(fit_svm2)
fit_svm2$index
fit_svm3 = svm(y ~ .,
data = df2,
kernel = "linear",
cost = 10)
plot(fit_svm3, df2)
summary(fit_svm3)
fit_svm3$index
fit_svm4 = svm(y ~ .,
data = df2,
kernel = "linear",
cost = .01)
plot(fit_svm4, df2)
summary(fit_svm4)
fit_svm4$index
set.seed(0)
n = 200
x1 = c(rnorm(n/2, -1, 1), rnorm(n/2, 1, 1))
x2 = c(rnorm(n/2, -1, 1), rnorm(n/2, 1, 1))
y = as.factor(c(rep(-1, n/2), rep(1, n/2)))
df3 = data.frame(x1, x2, y)
plot(df3$x1, df3$x2, col = df3$y)
set.seed(0)
n = 200
fit_svm_cv = e1071::tune(e1071::svm,
y ~ .,
data = df3[idx_iis, ],
kernel = "linear",
ranges = list(cost = 10^(seq(-10, -1, length = 100))))
summary(fit_svm_cv)
plot(fit_svm_cv$performances$cost,
fit_svm_cv$performances$error,
xlab = "Cost",
ylab = "Error Rate",
type = "l")
fit_svm_cv_best = fit_svm_cv$best.model
summary(fit_svm_cv_best)
ypred = predict(fit_svm_cv_best, df3[idx_oss, ])
table("Predicted Values" = ypred, "True Values" = df3[idx_oss, "y"])
svm.best.df3 = svm(y ~ .,
data = df3,
kernel = "linear",
cost = fit_svm_cv_best$cost)
plot(svm.best.df3, df3)
summary(svm.best.df3)
svm.best.df3$index
ypred = predict(svm.best.df3, df3)
table("Predicted Values" = ypred, "True Values" = df3[, "y"])
# Base Case ####
set.seed(0)
n = 200
x1 = c(rnorm(n/2, 0, 4), rnorm(n/2, 1, 3))
x2 = c(rnorm(n/2, 0, 1), rnorm(n/2, 6, 1))
y = as.factor(c(rep(-1, n/2), rep(1, n/2)))
df1 = data.frame(x1, x2, y)
targetname = 'y'
plot(x = df1$x1,y = df1$x2, col = df1$y)
idx_iis = sample(1:200, 200*.8)
idx_oss = setdiff(1:n,idx_iis)
library(e1071)
fit_svm = svm(y ~ ., data = df1,
subset = idx_iis,
kernel = "linear",
cost = 1e6)
plot(fit_svm, data = df1[idx_iis, ])
summary(fit_svm)
fit_svm$index
ypred = predict(fit_svm, df1[idx_oss,])
table('predicted' = ypred,'actual'=df1[idx_oss, targetname])
df2 = rbind(df1, c(10, 2, 1))
plot(x = df2$x1, y = df2$x2, col = df2$y)
fit_svm3 = svm(y ~ .,
data = df2,
kernel = "linear",
cost = 10)
plot(fit_svm3, df2)
summary(fit_svm3)
fit_svm3$index
fit_svm4 = svm(y ~ .,
data = df2,
kernel = "linear",
cost = .01)
plot(fit_svm4, df2)
summary(fit_svm4)
fit_svm4$index
set.seed(0)
n = 200
x1 = c(rnorm(n/2, -1, 1), rnorm(n/2, 1, 1))
x2 = c(rnorm(n/2, -1, 1), rnorm(n/2, 1, 1))
y = as.factor(c(rep(-1, n/2), rep(1, n/2)))
df3 = data.frame(x1, x2, y)
plot(df3$x1, df3$x2, col = df3$y)
set.seed(0)
n = 200
fit_svm_cv = e1071::tune(e1071::svm,
y ~ .,
data = df3[idx_iis, ],
kernel = "linear",
ranges = list(cost = 10^(seq(-10, -1, length = 100))))
summary(fit_svm_cv)
plot(fit_svm_cv$performances$cost,
fit_svm_cv$performances$error,
xlab = "Cost",
ylab = "Error Rate",
type = "l")
fit_svm_cv_best = fit_svm_cv$best.model
fit_svm_cv_best
summary(fit_svm_cv_best)
ypred = predict(fit_svm_cv_best, df3[idx_oss, ])
table("Predicted Values" = ypred, "True Values" = df3[idx_oss, "y"])
svm.best.df3 = svm(y ~ .,
data = df3,
kernel = "linear",
cost = fit_svm_cv_best$cost)
plot(svm.best.df3, df3)
summary(svm.best.df3)
svm.best.df3$index
ypred = predict(svm.best.df3, df3)
table("Predicted Values" = ypred, "True Values" = df3[, "y"])
setwd("spacefolder/")
reticulate::source_python('~/Downloads/spacefolder/MAIN2.py')
reticulate::source_python('~/Downloads/spacefolder/MAIN.py')
setwd('/Users/davidromoff/PYGspaceinvaders/')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/Downloads/spacefolder/MAIN2.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::repl_python()
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
reticulate::source_python('~/PYGspaceinvaders/PYGSpaceInvader.py')
